{"ast":null,"code":"var _jsxFileName = \"D:\\\\js\\\\React_Sotialna_Set\\\\src\\\\components\\\\Users\\\\UsersContainer.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { followAC, setCurrentPageAC, setTotalUsersCountAC, setUsersAC, toggleFetchingAC, unFollowAC } from \"../../redux/users-reducer\";\nimport { Users } from \"./Users\";\nimport axios from \"axios\";\nimport { Preloader } from \"../common/Preloader/Preloader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class UsersAPIComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`, {\n        withCredentials: true\n      }).then(response => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n        this.props.setTotalUsersCount(response.data.totalCount);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`, {\n      withCredentials: true\n    }).then(response => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount); /// должно быть в onPageChanged\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 38\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        pageSize: this.props.pageSize,\n        onPageChanged: this.onPageChanged,\n        users: this.props.users,\n        currentPage: this.props.currentPage,\n        unFollow: this.props.unFollow,\n        follow: this.props.follow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), \";\"]\n    }, void 0, true);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    follow: userId => {\n      dispatch(followAC(userId));\n    },\n    unFollow: userId => {\n      dispatch(unFollowAC(userId));\n    },\n    setUsers: users => {\n      dispatch(setUsersAC(users));\n    },\n    setCurrentPage: currentPage => {\n      dispatch(setCurrentPageAC(currentPage));\n    },\n    setTotalUsersCount: totalCount => {\n      dispatch(setTotalUsersCountAC(totalCount));\n    },\n    toggleIsFetching: isFetching => {\n      dispatch(toggleFetchingAC(isFetching));\n    }\n  };\n};\n\nexport const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersAPIComponent);","map":{"version":3,"sources":["D:/js/React_Sotialna_Set/src/components/Users/UsersContainer.tsx"],"names":["React","connect","followAC","setCurrentPageAC","setTotalUsersCountAC","setUsersAC","toggleFetchingAC","unFollowAC","Users","axios","Preloader","UsersAPIComponent","Component","onPageChanged","pageNumber","props","setCurrentPage","toggleIsFetching","get","pageSize","withCredentials","then","response","setUsers","data","items","setTotalUsersCount","totalCount","componentDidMount","currentPage","render","isFetching","totalUsersCount","users","unFollow","follow","mapStateToProps","state","usersPage","mapDispatchToProps","dispatch","userId","UsersContainer"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {connect, MapDispatchToProps} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\nimport {\n    followAC,\n    setCurrentPageAC, setTotalUsersCountAC,\n    setUsersAC, toggleFetchingAC,\n    unFollowAC,\n    userType\n} from \"../../redux/users-reducer\";\nimport {Users} from \"./Users\";\nimport axios from \"axios\";\nimport {Preloader} from \"../common/Preloader/Preloader\";\n\nexport type mapStateToPropsType = {\n    users: AppStateType\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n}\nexport type mapDispatchToPropsType = {\n    follow: (userId: string) => void\n    unFollow: (userId: string) => void\n    setUsers: (users: Array<userType>) => void\n    setCurrentPage: (currentPage: number) => void\n    setTotalUsersCount: (totalCount: number) => void\n    toggleIsFetching: (isFetching: boolean) => void\n}\n\nexport type UsersPropsType = mapStateToPropsType & mapDispatchToPropsType\n\nexport class UsersAPIComponent extends React.Component<UsersPropsType> {\n\n\n    componentDidMount() {\n        this.props.toggleIsFetching(true);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`,\n            {\n                withCredentials:true\n            }).then(response => {\n            this.props.toggleIsFetching(false)\n            this.props.setUsers(response.data.items)\n            this.props.setTotalUsersCount(response.data.totalCount)/// должно быть в onPageChanged\n        });\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.setCurrentPage(pageNumber);\n        this.props.toggleIsFetching(true);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`,\n            {\n            withCredentials:true\n        }).then(response => {\n            this.props.toggleIsFetching(false);\n            this.props.setUsers(response.data.items)\n            this.props.setTotalUsersCount(response.data.totalCount)\n        });\n    }\n\n    render() {\n        return <>\n            {this.props.isFetching ? <Preloader/> : null}\n            <Users\n                totalUsersCount={this.props.totalUsersCount}\n                pageSize={this.props.pageSize}\n                onPageChanged={this.onPageChanged}\n                users={this.props.users}\n                currentPage={this.props.currentPage}\n                unFollow={this.props.unFollow}\n                follow={this.props.follow}\n\n            />;\n        </>\n    }\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        users: state,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        follow: (userId: string) => {\n            dispatch(followAC(userId))\n        },\n        unFollow: (userId: string) => {\n            dispatch(unFollowAC(userId))\n        },\n        setUsers: (users: Array<userType>) => {\n            dispatch(setUsersAC(users))\n        },\n        setCurrentPage: (currentPage: number) => {\n            dispatch(setCurrentPageAC(currentPage))\n        },\n        setTotalUsersCount: (totalCount: number) => {\n            dispatch(setTotalUsersCountAC(totalCount))\n        },\n        toggleIsFetching: (isFetching: boolean) => {\n            dispatch(toggleFetchingAC(isFetching))\n        }\n    }\n}\n\n\nexport const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersAPIComponent)"]},"metadata":{},"sourceType":"module"}