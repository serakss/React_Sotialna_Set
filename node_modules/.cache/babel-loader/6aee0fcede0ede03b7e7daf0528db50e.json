{"ast":null,"code":"import { addPostAC, updateNewPostTextAC } from \"../../../redux/dialogs-reducer\";\nimport { connect } from \"react-redux\";\nimport { MyPosts } from \"./MyPosts\";\n\n/*export const MyPostsContainer: React.FC<MyPostsContainerType> = (props) => {\n\n    /!*let postData = [\n        {id: \"1\", message: \"Hi, how are you?\", likesCount: 12},\n        {id: \"2\", message: \"It's my first post\", likesCount: 5},\n        {id: \"3\", message: \"aaaaaaaaaaaaaaa\", likesCount: 5},\n\n    ]\n\n*!/\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\n\n    let onAddPost = () => {\n        // props.addPost()\n        props.store.dispatch(addPostAC())\n\n    }\n    let onPostChange = (text:string) => {\n        //let text = newPostElement.current? newPostElement.current.value: \"\"\n        props.store.dispatch(updateNewPostTextAC(text))\n        /!*props.dispatch({type: \"UPDATE-NEW-POST-TEX\", newText: newPostElement.current? newPostElement.current.value: \"\"})*!/\n        /!*if (newPostElement.current) {\n            props.updateNewPostText(newPostElement.current.value)\n        }*!/\n    }\n\n    return (<MyPosts updateNewPostText={onPostChange} addPost ={onAddPost} posts={props.store.getState()}/> )\n}*/\nlet mapStateToProps = state => {\n  return {\n    posts: state\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    updateNewPostText: text => {\n      dispatch(updateNewPostTextAC(text));\n    },\n    addPost: () => {\n      dispatch(addPostAC());\n    }\n  };\n};\n\nexport const SuperMyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","map":{"version":3,"sources":["D:/js/React_Sotialna_Set/src/components/Profile/MyPosts/MyPostsContainer.tsx"],"names":["addPostAC","updateNewPostTextAC","connect","MyPosts","mapStateToProps","state","posts","mapDispatchToProps","dispatch","updateNewPostText","text","addPost","SuperMyPostsContainer"],"mappings":"AAGA,SAAQA,SAAR,EAAmBC,mBAAnB,QAA6C,gCAA7C;AAIA,SAAQC,OAAR,QAAsB,aAAtB;AAIA,SAAQC,OAAR,QAAsB,WAAtB;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIC,eAAe,GAAIC,KAAD,IAAyB;AAC3C,SAAO;AACHC,IAAAA,KAAK,EAAED;AADJ,GAAP;AAGH,CAJD;;AAOA,IAAIE,kBAAkB,GAAIC,QAAD,IAAuB;AAC5C,SAAO;AACHC,IAAAA,iBAAiB,EAAEC,IAAD,IAAe;AAC7BF,MAAAA,QAAQ,CAACP,mBAAmB,CAACS,IAAD,CAApB,CAAR;AACH,KAHE;AAIHC,IAAAA,OAAO,EAAC,MAAI;AACRH,MAAAA,QAAQ,CAACR,SAAS,EAAV,CAAR;AACH;AANE,GAAP;AAQH,CATD;;AAWA,OAAO,MAAMY,qBAAqB,GAAGV,OAAO,CAACE,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CJ,OAA7C,CAA9B","sourcesContent":["import React, {RefObject} from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport {Post} from \"./Post/Post\";\nimport {addPostAC, updateNewPostTextAC} from \"../../../redux/dialogs-reducer\";\nimport {ActionType, stateType} from \"../../../redux/store\";\nimport {AppStateType, StoreType} from \"../../../redux/redux-store\";\n\nimport {connect} from \"react-redux\";\nimport {Message} from \"../../Dialogs/Message/Message\";\nimport {Dispatch} from \"redux\";\nimport {sendMessageAC, updateNewMessageTextAC} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\n\n\n\ntype MyPostsContainerType = {\n    store:StoreType\n}\n\n/*export const MyPostsContainer: React.FC<MyPostsContainerType> = (props) => {\n\n    /!*let postData = [\n        {id: \"1\", message: \"Hi, how are you?\", likesCount: 12},\n        {id: \"2\", message: \"It's my first post\", likesCount: 5},\n        {id: \"3\", message: \"aaaaaaaaaaaaaaa\", likesCount: 5},\n\n    ]\n\n*!/\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\n\n    let onAddPost = () => {\n        // props.addPost()\n        props.store.dispatch(addPostAC())\n\n    }\n    let onPostChange = (text:string) => {\n        //let text = newPostElement.current? newPostElement.current.value: \"\"\n        props.store.dispatch(updateNewPostTextAC(text))\n        /!*props.dispatch({type: \"UPDATE-NEW-POST-TEX\", newText: newPostElement.current? newPostElement.current.value: \"\"})*!/\n        /!*if (newPostElement.current) {\n            props.updateNewPostText(newPostElement.current.value)\n        }*!/\n    }\n\n    return (<MyPosts updateNewPostText={onPostChange} addPost ={onAddPost} posts={props.store.getState()}/> )\n}*/\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state\n    }\n}\n\n\nlet mapDispatchToProps = (dispatch:Dispatch) => {\n    return {\n        updateNewPostText:(text:string)=>{\n            dispatch(updateNewPostTextAC(text))\n        },\n        addPost:()=>{\n            dispatch(addPostAC())\n        }\n    }\n}\n\nexport const SuperMyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);"]},"metadata":{},"sourceType":"module"}